{"ast":null,"code":"var _jsxFileName = \"/home/longvudang/Desktop/todo/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Fragment, useEffect, useState } from 'react';\nimport AddTask from './Users/AddTask';\nimport UserList from './Users/UserList';\nimport ListDone from './Users/ListDone';\nimport Button from './UI/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [editedList, setEditedList] = useState('');\n  const [taskList, setTaskList] = useState([]);\n  const [taskListDone, setTaskListDone] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [order, setOrder] = useState('ASC');\n\n  const addTaskHandler = mtask => {\n    setTaskList(prevTask => {\n      return [...prevTask, {\n        task: mtask,\n        id: Math.random().toString()\n      }];\n    }); // const newTodos = [...taskList, { task:mtask,id:Math.random().toString() }];\n    // setTaskList(newTodos);\n  };\n\n  const sorting = () => {\n    if (order === 'DSC') {\n      const sort = [...taskList].sort((a, b) => a.toLowerCase > b.toLowerCase() ? 1 : -1);\n      setTaskList(sort);\n      setOrder('ASC');\n    }\n\n    console.log(sort);\n  };\n\n  useEffect(() => {\n    const getTodo = JSON.parse(localStorage.getItem('todo'));\n\n    if (getTodo) {\n      setTaskList(getTodo);\n    }\n  }, []);\n  useEffect(() => {\n    const getDone = JSON.parse(localStorage.getItem('donetask')); // console.log(getDone)\n\n    if (getDone) {\n      setTaskListDone(getDone);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('donetask', JSON.stringify(taskListDone));\n  }, [taskListDone]);\n  useEffect(() => {\n    localStorage.setItem('todo', JSON.stringify(taskList));\n  }, [taskList]); // const deleteTaskHandler = (id) => {\n  //   const arrayDelete= taskList.filter(delete1 => delete1.id === id);\n  //   console.log(arrayDelete)\n  //   setTaskList(arrayDelete);\n  // }\n\n  const deleteTaskHandler = index => {\n    const newToDo = [...taskList]; // console.log(newToDo)\n\n    const deletedTodo = newToDo[index];\n    const newDoneTaskArray = [...taskListDone, deletedTodo];\n    setTaskListDone(newDoneTaskArray);\n    newToDo.splice(index, 1);\n    setTaskList(newToDo);\n    return newToDo;\n  };\n\n  const editTaskHandler = index => {\n    let newEditItem = taskList.find((ele, index1) => {\n      return index1 === index;\n    }); // console.log(newEditItem);\n\n    setEditedList(newEditItem);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heading\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"heading__img\",\n          src: \"https://freesvg.org/img/publicdomainq-business-man-working.png\",\n          alt: \"hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading__title\",\n          children: \"To-Do List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(AddTask, {\n          onAddTask: addTaskHandler,\n          edited: editedList,\n          edited1: setEditedList,\n          setTaskList: setTaskList,\n          taskList: taskList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form__label\",\n          htmlFor: \"todo\",\n          children: \"~ Today I need to ~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"search\",\n          onChange: event => {\n            setSearchTerm(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserList, {\n          users: taskList.filter(val => {\n            if (searchTerm === '') {\n              return true;\n            } else if (val.task.includes(searchTerm.toLowerCase())) {\n              return true;\n            } else {\n              return false;\n            }\n          }),\n          onDeleteTask: deleteTaskHandler,\n          onUpdateTask: editTaskHandler,\n          onSorting: sorting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form__label\",\n          htmlFor: \"todo\",\n          children: \"~ Done Task ~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: sort => sorting(sort.task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListDone, {\n          users: taskListDone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XIq0pkGGhvOzMs/tePmVAJt6yP4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/longvudang/Desktop/todo/my-app/src/App.js"],"names":["Fragment","useEffect","useState","AddTask","UserList","ListDone","Button","App","editedList","setEditedList","taskList","setTaskList","taskListDone","setTaskListDone","searchTerm","setSearchTerm","order","setOrder","addTaskHandler","mtask","prevTask","task","id","Math","random","toString","sorting","sort","a","b","toLowerCase","console","log","getTodo","JSON","parse","localStorage","getItem","getDone","setItem","stringify","deleteTaskHandler","index","newToDo","deletedTodo","newDoneTaskArray","splice","editTaskHandler","newEditItem","find","ele","index1","event","target","value","filter","val","includes"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Fragment, useEffect, useState } from 'react';\nimport AddTask from './Users/AddTask';\nimport UserList from './Users/UserList';\nimport ListDone from './Users/ListDone'\nimport Button from './UI/Button';\nfunction App() {\n  const [editedList,setEditedList] = useState('')\n  const [taskList,setTaskList] = useState([]);\n  const [taskListDone,setTaskListDone] = useState([]);\n  const [searchTerm,setSearchTerm] = useState('');\n  const [order,setOrder] = useState('ASC');\n  const addTaskHandler =(mtask) => {\n    setTaskList((prevTask) => {\n      return [\n        ...prevTask,\n        {task:mtask,id:Math.random().toString()}\n      ]\n    })\n    // const newTodos = [...taskList, { task:mtask,id:Math.random().toString() }];\n    // setTaskList(newTodos);\n  };\n  const sorting = () => {\n    if(order === 'DSC') { \n      const sort = [...taskList].sort((a, b)=> a.toLowerCase > b.toLowerCase() ? 1 : -1);\n      setTaskList(sort);\n      setOrder('ASC');\n    }\n    console.log(sort) \n    \n  };\n  \n\n\n\n\n\n  useEffect(() => {\n    const getTodo = JSON.parse(localStorage.getItem('todo'))\n\n    if(getTodo) {\n      setTaskList(getTodo)\n    }\n  },[])\n\n  \n  useEffect(() => {\n    const getDone = JSON.parse(localStorage.getItem('donetask'))\n    // console.log(getDone)\n    if(getDone) {\n      setTaskListDone(getDone)\n    }\n  },[])\n\n  useEffect(() => {\n    localStorage.setItem('donetask',JSON.stringify(taskListDone))\n  },[taskListDone])\n\n\n  useEffect(() => {\n    localStorage.setItem('todo',JSON.stringify(taskList))\n  },[taskList])\n  // const deleteTaskHandler = (id) => {\n  //   const arrayDelete= taskList.filter(delete1 => delete1.id === id);\n  //   console.log(arrayDelete)\n  //   setTaskList(arrayDelete);\n  // }\n\n\n  const deleteTaskHandler = (index) => {\n    const newToDo = [...taskList];\n    // console.log(newToDo)\n    const deletedTodo = newToDo[index] \n    const newDoneTaskArray = [...taskListDone,deletedTodo]\n    setTaskListDone(newDoneTaskArray)\n    newToDo.splice(index,1);\n    setTaskList(newToDo);\n    return newToDo;\n  }\n  const editTaskHandler = (index) => {\n    let newEditItem = taskList.find((ele,index1) => {\n      return index1 === index\n    });\n    // console.log(newEditItem);\n    setEditedList(newEditItem);\n  }\n  return (\n    \n    \n    <Fragment>\n      <section className='container'>\n        <div className=\"heading\">\n          <img className=\"heading__img\" src=\"https://freesvg.org/img/publicdomainq-business-man-working.png\" alt='hello'></img>\n          \n          <h1 className=\"heading__title\">To-Do List</h1>\n        </div>\n        \n        <div >\n          <AddTask onAddTask={addTaskHandler} edited={editedList} edited1={setEditedList}  setTaskList={setTaskList} taskList={taskList}></AddTask>\n          <label className=\"form__label\" htmlFor=\"todo\" >~ Today I need to ~</label>\n\n          <input type='text' placeholder='search' onChange={event => {setSearchTerm(event.target.value);\n          }}\n          ></input>\n          \n          <UserList users={taskList.filter((val) =>{\n            \n            if(searchTerm === ''){\n              return true\n            }else if(val.task.includes(searchTerm.toLowerCase())){\n              return true\n              \n            }else{\n              return false\n            }\n          \n          })} onDeleteTask ={deleteTaskHandler}  onUpdateTask = {editTaskHandler} onSorting = {sorting} ></UserList>\n          <label className=\"form__label\" htmlFor=\"todo\" >~ Done Task ~</label>\n          <Button onClick={(sort) => sorting(sort.task)}></Button>\n          <ListDone users={taskListDone} ></ListDone>\n\n          \n          \n\n\n\n        </div>\n\n      </section>\n      \n     \n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}